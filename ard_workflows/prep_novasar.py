# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/2_prep_novasar.ipynb (unless otherwise specified).

__all__ = ['prep_novasar']

# Cell
import os
import time
from glob import glob
import shutil

from .prep_utils import sedas_client, sedas_download, sedas_extract, sedas_find_datasets
from .prep_utils import run_snap_command, setup_logging
from .prep_utils import convert2cog, s3_upload_dir

# Cell
def prep_novasar(sedas_supplierId, inter_dir="/tmp/data/intermediate/",
                  s3_bucket="public-eo-data", s3_dir="novasar_uk_test/"):
    """
    Prepare a Sedas-hosted NovaSAR .zip scene(/strip) by suppliedId into a flavour of ARD
    using SNAP and upload output COGs to Catapult object storage.
    """
    try:
        snap_gpt = os.environ['SNAP_GPT']
        novasar_process = os.environ['NOVASAR_PROCESS']
        root = setup_logging()

        inter_dir = f"{inter_dir}{sedas_supplierId}_tmp/"
        os.makedirs(inter_dir, exist_ok=True)
        master_scene_name = sedas_supplierId
        down_zip = f"{inter_dir}{master_scene_name}.zip"
        master_scene_dir = f"{down_zip[:-4]}/"


        print(f"{time.strftime('%Y-%m-%d %H:%M:%S')} Preparing {master_scene_name} within {inter_dir}")
        # find & download
        sedas_scene_res = sedas_client().search_product(sedas_supplierId)[0]
        sedas_download([sedas_scene_res], inter_dir)
        sedas_extract(down_zip, master_scene_dir)

        scenes_metadata = glob(f"{inter_dir}**/*metadata.xml", recursive=True)

        for scene_metadata in scenes_metadata:

            scene_name = scene_metadata.split('/')[-2]
            print(scene_name)

            out_dim = f"{inter_dir}{scene_name}_ML_TC_TF.dim"
            out_dimdir = f"{out_dim[:-4]}.data/"
            print(out_dimdir)

            out_cog_dir = f"{out_dimdir.replace('.data','_cog')}"
            os.makedirs(out_cog_dir, exist_ok=True)
            print(out_cog_dir)

            cmd = [snap_gpt, novasar_process, f"-Pinput={scene_metadata}", f"-Poutput={out_dim}"]
            run_snap_command(cmd)

            scene_bands = glob(f"{out_dimdir}**/*.img", recursive=True)
            for band_path in scene_bands:
                out_cog = f"{out_cog_dir}{scene_name}_{os.path.basename(band_path)[:-4]}.tif"
                print(out_cog)
                convert2cog(band_path, out_cog, 1)

            shutil.copy(scene_metadata, f"{out_cog_dir}original_metadata.xml")
            shutil.copy(out_dim, f"{out_cog_dir}process_metadata.dim")

            # upload
            s3_upload_dir(out_cog_dir, s3_bucket, s3_dir)
        print(f"{time.strftime('%Y-%m-%d %H:%M:%S')} Prepared {master_scene_name} at {s3_dir}")
#         clean_up(inter_dir)
    except Exception as e:
        print(f"{time.strftime('%Y-%m-%d %H:%M:%S')} Failed with {e}")
#         clean_up(inter_dir)